generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime? // Campo necess√°rio para NextAuth

  googleId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isActive Boolean @default(true)

  accounts Account[]
  sessions Session[]

  agents   Agent[]
  Instance Instance[]

  @@map("users")
}

model Agent {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name        String
  description String

  systemPrompt String?
  temperature  Float   @default(0.7)

  status AgentStatus @default(ACTIVE)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  instance  Instance?

  @@map("agents")
}

enum AgentStatus {
  ACTIVE
  INACTIVE
}

model Instance {
  id        String  @id @default(uuid())
  name      String
  token     String?
  qrcode    Boolean
  is_active Boolean @default(true)

  agent_id String @unique
  user_id  String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  agent Agent @relation(fields: [agent_id], references: [id])
  user  User  @relation(fields: [user_id], references: [id])

  @@map("instances")
}
